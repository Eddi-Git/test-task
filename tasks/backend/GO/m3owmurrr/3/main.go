// Напиши код на GO, который "победит" другие языки
package main

import (
	"fmt"
	"math/rand"
	"sync"

	"golang.org/x/exp/constraints"
)

const meme = `
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠿⠿⠿⠿⠿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿									⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⢋⣡⣴⣶⣶⣶⣶⣿⣿⣿⣿⣷⣶⣶⣬⣍⣙⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿									⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⢛⣛⣛⣛⣛⡛⢛⠛⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⣋⣥⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣌⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿									⣿⣿⣿⣿⣿⣿⣿⠿⣛⣉⡓⠶⣯⣽⡳⢶⣭⣝⡛⠿⣿⣷⣶⣯⣝⡻⢷⣶⣯⡛⢶⣭⣙⡳⢮⡳⡝⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠋⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣉⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿ 									⣿⣿⣿⣿⣿⡿⣡⣌⣛⠿⣿⣷⣮⡛⢿⣶⣍⡻⢿⣿⣶⣭⣝⡻⢿⣿⣶⣭⣛⢿⣷⣝⢿⣿⣷⡄⡝⠎⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⢡⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣬⡙⢿⣿⣿⣿⣿⣿⣿									⣿⣿⣿⣿⣿⡁⡭⣍⣛⢿⣮⣙⢿⣿⣶⣍⡻⢿⣷⣭⣛⠻⢿⣿⣷⣮⣝⣛⠿⡷⠾⣝⠳⠾⢍⢿⣮⠊⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡌⢻⣿⣿⣿⣿⣿									⣿⣿⣿⣿⡟⣰⣦⣐⠝⠳⣌⠛⣓⡦⠝⠫⠉⣁⣈⣁⣶⣼⣬⣬⣥⣴⣶⣶⣶⣶⣾⣷⣶⣿⣷⣶⣶⣶⣦⠹⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⢻⣿⣿⣿⣿									⣿⣿⣿⡿⢠⣿⣿⣿⣿⣷⣮⡑⡝⣿⣿⣿⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢹⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡾⣿⣿⣿⣿⡿⢡⣿⣿⣿⣿⣿⣿⣿⡈⣿⣿⣿⣿	НЕЕЕТ!!!							⣿⣿⡿⢃⣟⣛⣭⣭⣭⣽⣛⣛⣢⣸⣿⣿⡘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⢻⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⡇⣿⣿⣿⣿⢡⣿⣿⣿⣿⣿⣿⣿⡟⡇⢸⣿⣿⣿	ТЫ НЕ МОЖЕШЬ ПРОСТО ТАК БРАТЬ					⣿⣿⠁⡿⢿⣿⡿⠿⠿⢿⣿⣿⣿⣧⢹⣿⣧⠸⣿⣿⣿⠿⢟⣛⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠈⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡌⢿⣿⣿⡟⣴⣿⣿⣿⣿⣼⣿⣿⣿⣿⣿⡿⢻⣿⣦⡈⢿⣿⣿	СОЗДАВАТЬ ЦЕЛУЮ КУЧУ ПОТОКОВ!!!					⣿⣿⡀⠃⠰⠀⠠⠥⠭⢅⣊⡙⠿⣿⣸⣿⣿⡆⣿⠋⣄⡴⠿⢿⣧⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⢿⣿⣿⣿⣷⣬⣛⢷⣿⡟⣿⡿⣿⡘⣿⣿⠿⠟⣩⣴⣿⣿⣿⣿⠘⣿⣿									⣿⣿⡟⣰⡟⣻⡇⠀⠀⢰⠎⣹⣙⣂⣿⣿⣿⡇⢩⡳⡙⠿⠿⠷⡝⡆⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⠟⠛⠛⠛⠛⠛⠻⠿⠿⣦⣤⣤⡄⢀⡀⣀⣀⡉⠉⠉⠉⣁⠉⠰⢿⣷⢻⠙⠇⣼⣿⡿⠿⠿⠿⠿⠿⠿⠁⣿⣿									⣿⡟⣰⣿⢡⣿⣷⣤⣤⣶⣾⣿⣿⣿⣿⣿⣿⡿⢠⡙⣶⡆⣿⣷⡇⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⣰⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⡿⠀⣿⣿⣿⣿⣿⣷⣶⣦⣤⣤⠤⠀⢘⡉⠁⠙⠻⠿⣶⣼⡿⢋⣠⠈⠉⢀⣁⠀⠉⠁⠀⢤⣤⣤⣤⣶⣶⡆⠘⣿ 									⡿⢡⣿⣧⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⢴⢌⢙⣮⡅⣿⣿⣰⢃⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⣰⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⢿⣿⣄⣨⣿⣿⣿⣿⣿⣿⣿⣏⣤⡝⠀⠸⠇⠀⠀⠀⠠⠌⣘⣿⣿⣿⠀⣾⣿⣿⣿⠆⠀⢠⠀⠌⠙⢻⣿⣿⡇⠀⣿									⠃⣿⣿⣿⣿⣟⣛⠻⣿⣿⣿⣿⣿⣿⠋⡄⣿⣈⣛⢷⡖⢦⢻⠟⢡⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⣡⣾⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡳⠆⠸⣿⣿⡆⢹⣿⠆⢸⣿⣿⣿⠀⣿⣿⣿⡟⣠⡀⡈⢤⣤⠤⠌⢻⣿⣧⠀⣿									⣦⣍⠛⣋⡉⠛⢛⣣⣿⠩⡍⢝⢻⢇⣼⣿⣌⠻⣟⢿⡿⢮⠀⢺⣮⣛⣛⣛⣛⣩⣽⣿⣭⣭⣶⡶⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢋⣿⣶⡄⣤⡀⢀⡀⣀⣈⣈⣉⣉⣁⣴⣿⣿⣿⠹⣮⣀⣁⠀⠙⠀⠀⠀⣉⠉⠀⣾ 									⣿⡇⡀⠙⢿⡙⠶⣭⣓⠠⠆⠌⡦⣸⣇⢷⡹⣷⣭⣮⠻⣾⠷⠌⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠹⣿⣿⣬⡛⠟⠉⢿⣿⢃⣿⣿⣿⡇⠻⢁⢎⣾⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣧⡙⣿⣿⣧⢹⣷⣀⣿⣿⣸⡇⣿									⣿⣷⣤⡄⢀⡚⠖⠶⠎⠡⠘⠁⣡⠩⡹⣎⢻⡝⣿⠙⢷⢭⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠘⣿⣿⣿⣷⡄⢾⣿⢸⣿⣿⣿⡇⡎⣠⣿⣿⡿⢋⣴⣿⡿⢿⣿⣿⣿⣿⣿⣷⣌⢻⣿⢰⣿⢸⣿⣿⡏⢀⣿									⣿⣿⣿⡟⢀⢀⢀⡄⣆⢲⣞⢿⢿⡇⣿⠹⡿⣿⡌⣮⡻⢶⣮⡁⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⢻⣿⣿⣛⡉⠸⣿⣿⣿⣿⣿⣷⠱⣿⣿⠟⣠⣾⣿⠰⣶⣾⣿⣿⣿⣿⣿⣿⠏⣸⣿⡏⣾⣼⢿⣿⠃⣸⣿									⣿⣿⡟⡡⡸⢸⡜⣷⢸⢧⢻⡎⢦⡹⣼⣧⢻⣜⣿⣮⣻⣶⣝⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣷⡄⢻⣿⣿⣿⣿⡿⢀⣿⠋⣼⡿⣿⣿⣧⣬⣭⣷⣶⣶⣿⣭⣉⣤⢹⣿⣷⢻⠏⣸⠟⣴⣿⣿									⣿⣿⠰⠁⣷⣿⢡⡏⣼⢳⡄⠙⣾⣇⢻⣭⡄⣿⣿⡹⣯⣭⠄⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣭⣅⠈⣿⣿⣿⣿⡇⢸⡏⣼⢰⣾⣿⣿⠟⠋⣥⠀⣦⠈⣉⢛⠛⢿⡄⢿⣿⢸⡀⢋⣸⣿⣿⣿									⣿⣿⠀⣷⠙⠓⢋⡌⣿⡜⣷⠀⢿⣟⢊⠻⡙⣟⣻⠛⣪⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠉⠉⠉⠀⠉⠉⠉⢹⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⠀⢙⣿⣿⣿⠃⡘⢰⣿⠘⣿⡿⠁⠀⠁⠀⠀⠀⠀⠉ ⠈⠁⠈⢡⢘⡇⣼⠃⣻⣿⣿⣿									⣿⡟⠾⣄⡴⡄⢿⡅⠾⣷⢹⣇⢌⡻⣯⠙⠚⣩⣵⣾⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠙⢿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⣾⣿⣿⣿⣿⡿⢸⣿⠿⣿⣿⢰⡇⢸⣿⣧⣿⡇⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⣸⡿⢱⡟⢸⣿⣿⣿⣿						ХА		 	⣿⣿⡀⠻⣇⢻⣾⡇⠁⣿⠷⣿⠺⠋⣴⣾⠃⣿⣿⣿⣿⣿⣿⣿⡿⠟⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣿⣿⣿⣿⣥⣿⣿⣴⣦⠉⠸⣿⡌⣍⢿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀  ⣴⡿⠁⡞⠰⣾⣿⣿⣿⣿						⣿⣿⣿⣦⣈⠶⠙⠿⠌⠻⣃⣴⣾⡷⠸⣿⣼⣿⣿⡿⠿⠛⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢃⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⣀⣠⡈⢷⡘⣿⣿⣿⣿⣄⠀⠀⠀⠀ ⠀⣀⣼⡛⠁⡀⣰⣶⣿⣿⣿⣿⣿⣿									⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⠃⠀⠀⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣤⣤⣶
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢃⣾⣿⣿⣿⣿⡿⢛⣉⣽⣿⣿⣿⣿⣿⣧⠄⠉⣬⢈⠽⣿⣿⣦⡀⢤⣤⣶⣿⣿⡟⠁⠀⣤⣿⣿⣿⣿⣿⣿⣿⣿									⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀ ⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣤⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⣡⣾⣿⣿⣿⣿⠟⣠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣷⡄⠈⠀⠧⠹⠡⠿⡆⠨⡄⠙⠋⣤⣸⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿									⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣤⣤⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⠿⢛⣋⣭⣤⣬⣽⣿⣿⣿⣯⣥⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣬⣂⣴⣶⣤⣶⣶⣴⣦⣬⣥⣤⣥⣥⣬⣭⣍⣛⠛⠛⠻									⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀ ⠀⠀⣀⣀⣀⣤⣤⣤⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣯⣭⣭⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢛⠿⣿⣿⣿⣿⡿⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿									⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣙⣛⣋⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿									⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿`

type Number interface {
	constraints.Integer | constraints.Float
}

func sumArray[T Number](arr []T) (sum T) {
	for _, v := range arr {
		sum += v
	}
	return
}

func sumArrayConcurrent[T Number](arr []T) (totalSum T) {
	const chunkSize = 10
	n := len(arr)
	numG := (n / chunkSize) + 1

	var wg sync.WaitGroup
	c := make(chan T, numG)

	for i := 0; i < numG; i++ {
		start := i * chunkSize
		end := start + chunkSize
		if end > n {
			end = n
		}

		fmt.Printf("Run goroutine %d\n", i)
		wg.Add(1)
		go func(arr []T) {
			defer wg.Done()
			c <- sumArray(arr[start:end])
		}(arr)
	}

	go func() {
		wg.Wait()
		close(c)
	}()

	for s := range c {
		totalSum += s
	}
	return 0
}

func main() {
	fmt.Println(meme)
	fmt.Println()

	arr := make([]int, 1000)
	for i := range arr {
		arr[i] = rand.Int()
	}

	fmt.Println(sumArrayConcurrent(arr))
}
